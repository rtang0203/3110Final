include "list.rmx"
include "map.rmx"
include "navigate.rmx"

// Receive map information from server
send ("info", ()) to SERVER;
await ((width, height), (vision_rad, (robot_cap, max_bots))) = recv SERVER in

// Main entrypoint for each robot
let main (id, master) =

  // Receive home base location
  // The [home] variable is in scope for the rest of this function,
  // and can be used to refer to the position of this robot's home base.
  send ("look", ()) to SERVER;
  await (home, _) :: _ = recv SERVER in

  /** TODO: Excellent Scope
    *
    * Here is where you can initialize shared mutable memory.
    * For demonstration, a basic counter is created below,
    * and periodically updated in the [listen_bot] and
    * [listen_server] functions.
    *
    * Feel free to modify or delete this code.
    */


  /** [listen_bot bot] is an infinite loop of message passing
    * between [SELF] and [bot] for information exchange.
    */
  let rec listen_bot bot =

    /** TODO: Excellent Scope
      *
      * Here is where you can implement inter-robot communication.
      * A basic pinging example is provided below.
      *
      * Feel free to modify or delete the code inside this
      * function freely, but DO NOT delete the whole function
      * declaration (even if you don't use it).
      */

    // Send and receive information from [bot]
    send "ping" to bot;
    await ping = recv bot in
    print ("Received " ^ ping ^ " from ");
    println bot;

    // Update shared state
    counter := !counter + 1;
    println (!counter);

    // Sleep a little before looping to prevent excessive CPU usage
    await _ = sleep 1000 in
    listen_bot bot
  in

  let get_current_pos () = 
      send ("look", ()) to SERVER;
      await (current_pos, _) :: _ = recv SERVER in
      return current_pos
      in

  let get_current_gold () = 
  send ("inv", ()) to SERVER; 
  await gold = recv SERVER in return gold in

  let explore r = 
    print("calling explore");
    await prev_gold = get_current_gold () in

    send ("take", "N") to SERVER;
    await curr_g1 = get_current_gold () in 
    if curr_g1 > prev_gold then
    r := "return"; return ()
    /**
    else send ("take", "S") to SERVER;
    await curr_g2 = get_current_gold () in 
    if curr_g2 > prev_gold then
    r := "return"; return ()
    else send ("take", "E") to SERVER;
    await curr_g3 = get_current_gold () in
    if curr_g3 > prev_gold then
    r := "return"; return ()
    else send ("take", "W") to SERVER;
    await curr_g4 = get_current_gold () in
    if curr_g4 > prev_gold then
    r := "return"; return ()
    else send ("take", "NS") to SERVER;
    await curr_g5 = get_current_gold () in
    if curr_g5 > prev_gold then
    r := "return"; return ()
    else send ("take", "NW") to SERVER;
    await curr_g6 = get_current_gold () in
    if curr_g6 > prev_gold then
    r := "return"; return ()
    else send ("take", "SW") to SERVER;
    await curr_g7 = get_current_gold () in
    if curr_g7 > prev_gold then
    r := "return"; return ()
    else send ("take", "SE") to SERVER;
    await curr_g8 = get_current_gold () in
    if curr_g8 > prev_gold then
    r := "return"; return ()
  */
    else send ("move", random_dir ()) to SERVER; return () 

  in

  let rec go_back r =
  print("go back");
    await pos = get_current_pos () in
    if pos = home then r := "explore"; return ()
    else let dir_to_move = direction pos home in
    send ("move", dir_to_move) to SERVER in 
    go_back r in



  let state = ref "explore" in
  /** [listen_server ()] is an infinite loop of communication with [SERVER]
    * and state-machine based decision logic for this robot.
    */
  let rec listen_server () =
  
    match !state with 
    |"explore" -> print("in explore case"); ignore(explore state); listen_server ()
    |"return" -> ignore(go_back state); listen_server ()
    | _ -> print ("oops"); listen_server()
    end


    /** TODO: Satisfactory, Good, and Excellent Scope
      *
      * Fill in the body of this function as described in the writeup.
      *
      * A basic example of sending and receiving map information
      * from the server is provided for you below. 
      */


    

    








    // Access server API via [send] and [recv]
    send ("look", ()) to SERVER;
    await look = recv SERVER in
    println look;

    // Update shared state
    counter := !counter + 100;
    println (!counter);

    // Sleep a little before looping to prevent excessive CPU usage
    await () = sleep 1000 in
    listen_server ()
  in

  /***************************************/
  /*                                     */
  /*                                     */
  /* DO NOT MODIFY CODE BELOW THIS LINE. */
  /*                                     */
  /*                                     */
  /***************************************/

  // Start all listening function loops
  await bots = recv master in
  let run = map (fun bot -> listen_bot bot) bots in
  join ((listen_server ()) :: run)
in

/** [spawn_all n] is an association list of integers to handles:
  * [[(m1, h1); ...; (mn, hn)]], where each handle [mi] is to a
  * server running [main] applied to argument [(mi, SELF)].
  */
let rec spawn_all n =
  if n = 0 then [] else (n, spawn main with (n, SELF)) :: (spawn_all (n - 1))
in

/** [other_than bot bots] is the list of handles [h1; ...; hn] in
  * association list [bots = [(m1, h1); ...; (mn, hn)]], minus
  * handle [hi] where [bot = mi].
  */
let other_than bot bots =
  map (fun (_, h) -> h) (filter (fun (bot', _) -> bot <> bot') bots)
in

// Spawn all bots with appropriate handle lists
let bots = (0, SELF) :: (spawn_all (max_bots - 1)) in
let _ = map (fun (bot, h) -> send other_than bot bots to h) bots in
main (0, SELF)
