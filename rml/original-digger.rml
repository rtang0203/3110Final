include "list.rmx"
include "map.rmx"
include "navigate.rmx"

// Receive map information from server
send ("info", ()) to SERVER;
await ((width, height), (vision_rad, (robot_cap, max_bots))) = recv SERVER in

// Main entrypoint for each robot
let main (id, master) =

  // Receive home base location
  // The [home] variable is in scope for the rest of this function,
  // and can be used to refer to the position of this robot's home base.
  send ("look", ()) to SERVER;
  await (home, _) :: _ = recv SERVER in

  

  /** TODO: Excellent Scope
    *
    * Here is where you can initialize shared mutable memory.
    * For demonstration, a basic counter is created below,
    * and periodically updated in the [listen_bot] and
    * [listen_server] functions.
    *
    * Feel free to modify or delete this code.
    */

  let counter = ref 0 in

  /** [listen_bot bot] is an infinite loop of message passing
    * between [SELF] and [bot] for information exchange.
    */
  let rec listen_bot bot =

    /** TODO: Excellent Scope
      *
      * Here is where you can implement inter-robot communication.
      * A basic pinging example is provided below.
      *
      * Feel free to modify or delete the code inside this
      * function freely, but DO NOT delete the whole function
      * declaration (even if you don't use it).
      */

    // Send and receive information from [bot]
    send "ping" to bot;
    await ping = recv bot in
    print ("Received " ^ ping ^ " from ");
    println bot;

    // Update shared state
    counter := !counter + 1;
    println (!counter);

    // Sleep a little before looping to prevent excessive CPU usage
    await _ = sleep 1000 in
    listen_bot bot
  in

  let true_if_gold entry = match entry with 
    |(_,("Gold", _)) -> true 
    |_ -> false 
    end 
    in 

  let get_pos entry = match entry with 
    |((x,y),_) -> (x,y)
    end 
    in 

  let explore_step lst curr_pos = 
    println "explore stepping";
    let gold_list = filter true_if_gold lst in
    match gold_list with 
    |[] -> send ("move", random_dir ()) to SERVER
    |h::t -> let gold_pos = get_pos h in 
      let dir = direction curr_pos gold_pos in
      if adjacent gold_pos curr_pos then 
        send ("take", dir) to SERVER; println "took gold"
      else 
        send ("move", dir) to SERVER 
    end 
    in 

  let return_step curr_pos r = 
    println "return stepping";
    if distance curr_pos home = 0 then 
      r := "explore"; println "ref changed to explore"
    else 
      let dir = direction curr_pos home in println "return direction acquired";
      send ("move", dir) to SERVER; println "return move sent to server"
    in 

  /** [listen_server ()] is an infinite loop of communication with [SERVER]
    * and state-machine based decision logic for this robot.
    */
  let state = ref "explore" in
  
  let rec listen_server () = 
    send ("look", ()) to SERVER;
    await look = recv SERVER in 

    let get_current_pos = 
      let (current_pos, _) :: _ = look in
      current_pos
      in

    println ("" ^ !state);
    match !state with 
      // |"explore" -> print("in explore case"); ignore(explore state); listen_server ()
      |"explore" -> explore_step look get_current_pos; 
      send ("inv", ()) to SERVER; await carry_amt = recv SERVER in 
      if carry_amt < robot_cap then listen_server () else state := "return"; listen_server ()
      |"return" -> return_step get_current_pos state; listen_server ()
      | _ -> print ("wrong state"); listen_server()
      end

  in

  /***************************************/
  /*                                     */
  /*                                     */
  /* DO NOT MODIFY CODE BELOW THIS LINE. */
  /*                                     */
  /*                                     */
  /***************************************/

  // Start all listening function loops
  await bots = recv master in
  let run = map (fun bot -> listen_bot bot) bots in
  join ((listen_server ()) :: run)
in

/** [spawn_all n] is an association list of integers to handles:
  * [[(m1, h1); ...; (mn, hn)]], where each handle [mi] is to a
  * server running [main] applied to argument [(mi, SELF)].
  */
let rec spawn_all n =
  if n = 0 then [] else (n, spawn main with (n, SELF)) :: (spawn_all (n - 1))
in

/** [other_than bot bots] is the list of handles [h1; ...; hn] in
  * association list [bots = [(m1, h1); ...; (mn, hn)]], minus
  * handle [hi] where [bot = mi].
  */
let other_than bot bots =
  map (fun (_, h) -> h) (filter (fun (bot', _) -> bot <> bot') bots)
in

// Spawn all bots with appropriate handle lists
let bots = (0, SELF) :: (spawn_all (max_bots - 1)) in
let _ = map (fun (bot, h) -> send other_than bot bots to h) bots in
main (0, SELF)
